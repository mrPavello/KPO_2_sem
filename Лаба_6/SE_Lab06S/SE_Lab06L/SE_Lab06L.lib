
Instance* Dictionary::Create(const char name[DICTNAMEMAXSIZE], int size) {
	if (strlen(name) > DICTNAMEMAXSIZE) {
#ifdef TEST_CREATE_01
		cout << TEST_CREATE_01 << endl;
#endif
		throw THROW01;
	}

	if (size > DICTMAXSIZE) {
#ifdef TEST_CREATE_02
		cout << TEST_CREATE_02 << endl;
#endif
		throw THROW02;
	}

	Instance* inst = new Instance;
	inst->dictionary = new Entry[size];
	inst->max_size = size;
	strncpy_s(inst->name, name, DICTNAMEMAXSIZE);
	inst->size = 0;

	num_dict++;
	if (num_dict == 2) {
		chek_create = true;
	}
	return inst;
}

void Dictionary::AddEntry(Instance& inst, Entry ed) {
	if (inst.size > inst.max_size) {
#ifdef TEST_CREATE_03
		cout << TEST_CREATE_03 << endl;
#endif
		throw THROW03;
	}

	for (int i = 0; i < inst.size; i++) {
		if (inst.dictionary[i].id == ed.id) {
#ifdef TEST_CREATE_04
			cout << TEST_CREATE_04 << endl;
#endif
			throw THROW04;
		}
	}

	inst.dictionary[inst.size] = ed;
	inst.size++;
	if (inst.size >= 7) {
		chek_add = true;
	}
}

void Dictionary::DelEntry(Instance& inst, int id) {
	for (int i = 0; i < inst.size; i++) {
		if (inst.dictionary[i].id == id) {
			for (int j = i; j < inst.size - 1; j++) {
				inst.dictionary[j] = inst.dictionary[j + 1];
			}
			chek_del = true;
			inst.size--;
			break;
		}
	}

	if (!chek_del) {
#ifdef TEST_CREATE_06
		cout << TEST_CREATE_06 << endl;
#endif
		throw THROW06;
	}
}

void Dictionary::UpdEntry(Instance& inst, int id, Entry new_ed) {
	for (int i = 0; i < inst.size; i++) {
		if (inst.dictionary[i].id == new_ed.id) {
#ifdef TEST_CREATE_08
			cout << TEST_CREATE_08 << endl;
#endif
			throw THROW08;
		}
	}

	for (int i = 0; i < inst.size; i++) {
		if (inst.dictionary[i].id == id) {
			inst.dictionary[i] = new_ed;
			chek_upd = true;
			break;
		}
	}

	if (!chek_upd) {
#ifdef TEST_CREATE_07
		cout << TEST_CREATE_07 << endl;
#endif
		throw THROW07;
	}
}

Entry Dictionary::GetEntry(Instance inst, int id) {
	Entry found_entry;
	for (int i = 0; i < inst.size; i++) {
		if (inst.dictionary[i].id == id) {
			found_entry = inst.dictionary[i];
			chek_get = true;
			break;
		}
	}

	if (!chek_get) {
#ifdef TEST_CREATE_05
		cout << TEST_CREATE_05 << endl;
#endif
		throw THROW05;
	}
	return found_entry;
}

void Dictionary::Print(Instance inst) {
	cout << '\n' << setfill('-') << setw(9) << " " << inst.name << " " << setfill('-') << setw(9) << '\n';
	for (int j = 0; j < inst.size; j++) {
		cout << inst.dictionary[j].id << " " << inst.dictionary[j].name << endl;
	}
	cout << endl;
	chek_print = true;
}

void Dictionary::Delete(Instance& inst) {
	delete[] inst.dictionary;
	delete[] & inst;
	chek_delete = true;
}